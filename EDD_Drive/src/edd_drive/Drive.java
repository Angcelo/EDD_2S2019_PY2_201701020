/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edd_drive;

import java.awt.Desktop;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Gregory De Le√≥n
 */
public class Drive extends javax.swing.JFrame {

 
    public String carpetaactual="/";
    public String direccion="/";
    private final ImageIcon defaultIcon;
    private final ImageIcon defaultIconarchivo;
    private javax.swing.JButton carpetas[];
    private javax.swing.JButton archivos[];
    public Drive() {
        initComponents();   
        this.defaultIcon = new ImageIcon(getClass().getResource("/img/carpeta.png"));
        this.defaultIconarchivo=new ImageIcon(getClass().getResource("/img/archivo.png"));
        crearbotones(carpetaactual,direccion);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPcar = new javax.swing.JPanel();
        btncrearcar = new javax.swing.JButton();
        btnmodcar = new javax.swing.JButton();
        btnelicar = new javax.swing.JButton();
        jParc = new javax.swing.JPanel();
        btncreararc = new javax.swing.JButton();
        btnuparc = new javax.swing.JButton();
        btnsalir = new javax.swing.JButton();
        btnbitacora = new javax.swing.JButton();
        btnreportecar = new javax.swing.JButton();
        btnreportarchivos = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPcontenido = new javax.swing.JPanel();
        btnupuser = new javax.swing.JButton();
        brnreportuser = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("drive "+EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].usuario);
        setResizable(false);

        jPcar.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Carpetas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        btncrearcar.setText("Crear");
        btncrearcar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncrearcarActionPerformed(evt);
            }
        });

        btnmodcar.setText("Modificar");
        btnmodcar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnmodcarActionPerformed(evt);
            }
        });

        btnelicar.setText("Eiminar");
        btnelicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnelicarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPcarLayout = new javax.swing.GroupLayout(jPcar);
        jPcar.setLayout(jPcarLayout);
        jPcarLayout.setHorizontalGroup(
            jPcarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPcarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPcarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btncrearcar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnmodcar, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                    .addComponent(btnelicar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPcarLayout.setVerticalGroup(
            jPcarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPcarLayout.createSequentialGroup()
                .addComponent(btncrearcar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnmodcar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnelicar)
                .addContainerGap())
        );

        jParc.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Archivos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        btncreararc.setText("Crear");
        btncreararc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncreararcActionPerformed(evt);
            }
        });

        btnuparc.setText("Subir");
        btnuparc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnuparcActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jParcLayout = new javax.swing.GroupLayout(jParc);
        jParc.setLayout(jParcLayout);
        jParcLayout.setHorizontalGroup(
            jParcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jParcLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jParcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btncreararc, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                    .addComponent(btnuparc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jParcLayout.setVerticalGroup(
            jParcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jParcLayout.createSequentialGroup()
                .addComponent(btncreararc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnuparc)
                .addContainerGap())
        );

        btnsalir.setText("Salir");
        btnsalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsalirActionPerformed(evt);
            }
        });

        btnbitacora.setText("Reporte Bitacora");
        btnbitacora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbitacoraActionPerformed(evt);
            }
        });

        btnreportecar.setText("Reporte Carpetas");
        btnreportecar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnreportecarActionPerformed(evt);
            }
        });

        btnreportarchivos.setText("Reporte Archivos");
        btnreportarchivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnreportarchivosActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBar(null);
        jScrollPane1.setMaximumSize(new java.awt.Dimension(27, 27));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(830, 500));

        jPcontenido.setBorder(javax.swing.BorderFactory.createTitledBorder("Drive"));
        jPcontenido.setAutoscrolls(true);
        jPcontenido.setMaximumSize(new java.awt.Dimension(22, 35));
        jPcontenido.setPreferredSize(new java.awt.Dimension(830, 500));
        jScrollPane1.setViewportView(jPcontenido);

        btnupuser.setText("Cargar Usuarios");
        btnupuser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnupuserActionPerformed(evt);
            }
        });

        brnreportuser.setText("Reporte Usuarios");
        brnreportuser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brnreportuserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPcar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jParc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnsalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnbitacora, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnreportecar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnreportarchivos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnupuser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(brnreportuser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 830, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPcar, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jParc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnupuser)
                        .addGap(97, 97, 97)
                        .addComponent(btnbitacora)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(brnreportuser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnreportarchivos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnreportecar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnsalir)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btncrearcarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncrearcarActionPerformed
        String name=JOptionPane.showInputDialog(null,"Nombre de la carpeta");
        if(name!=null){
            System.out.println("Carpeta en la que se va a insertar"+this.carpetaactual);
            if(EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].carpetas.insertar(this.carpetaactual, name)){
                Calendar calendario = Calendar.getInstance();
                int hora =calendario.get(Calendar.HOUR_OF_DAY);
                int minutos = calendario.get(Calendar.MINUTE);
                int segundos = calendario.get(Calendar.SECOND);
                int a√±o=calendario.get(Calendar.YEAR);
                int mes=calendario.get(Calendar.MONTH)+1;
                int dia=calendario.get(Calendar.DATE);
                String fecha=dia+"/"+mes+"/"+a√±o;
                String tiempo=hora + ":" + minutos + ":" + segundos;
                EDD_Drive.bitacora.insertar(fecha, tiempo, "Creacion carpeta "+name ,EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].usuario);
            }
        }
        crearbotones(this.carpetaactual,this.direccion);
    }//GEN-LAST:event_btncrearcarActionPerformed

    private void btncreararcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncreararcActionPerformed
        javax.swing.JTextField nombre=new javax.swing.JTextField(10);
        javax.swing.JTextArea contenido=new javax.swing.JTextArea(10, 10);
        JScrollPane scroll = new JScrollPane(contenido);
        contenido.setLineWrap(true);
        contenido.setWrapStyleWord(true);
        JPanel mypanel=new JPanel();
        mypanel.add(new JLabel("nombre:"));
        mypanel.add(nombre);
        mypanel.add(javax.swing.Box.createHorizontalStrut(25));
        mypanel.add(new JLabel("contenido:"));
        mypanel.add(scroll);
        if (JOptionPane.showConfirmDialog(null, mypanel,"Crear Archivo",JOptionPane.OK_CANCEL_OPTION)==JOptionPane.OK_OPTION) {
            Pattern patron=Pattern.compile(".+\\..+");
            Matcher encaja=patron.matcher(nombre.getText());
            System.out.println(nombre.getText());
            System.out.println(contenido.getText());
            if(encaja.find() && !contenido.getText().equals("")){
                String[] nomext=nombre.getText().split("\\.");
                String nombrearchivo=nomext[0];
                for (int i = 1; i < nomext.length-1; i++) {
                    nombrearchivo+="."+nomext[i];
                }
                try {
                    EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].carpetas.InsertarArchivo(this.carpetaactual, nombrearchivo, nomext[nomext.length-1],contenido.getText());
                    Calendar calendario = Calendar.getInstance();
                    int hora =calendario.get(Calendar.HOUR_OF_DAY);
                    int minutos = calendario.get(Calendar.MINUTE);
                    int segundos = calendario.get(Calendar.SECOND);
                    int a√±o=calendario.get(Calendar.YEAR);
                    int mes=calendario.get(Calendar.MONTH)+1;
                    int dia=calendario.get(Calendar.DATE);
                    String fecha=dia+"/"+mes+"/"+a√±o;
                    String tiempo=hora + ":" + minutos + ":" + segundos;
                    EDD_Drive.bitacora.insertar(fecha, tiempo, "Creacion archivo " + nombre.getText() ,EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].usuario);
                    crearbotones(this.carpetaactual,this.direccion);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "No se pudo crear archivo");
                    Logger.getLogger(Drive.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                JOptionPane.showMessageDialog(null, "No posee extension");
                System.out.println("No Posee extension");
            }
        }
    }//GEN-LAST:event_btncreararcActionPerformed

    private void btnmodcarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnmodcarActionPerformed
        String name=JOptionPane.showInputDialog(null,"Nombre de la carpeta");
        if (name!=null && !this.carpetaactual.equals("/")) {
            EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].carpetas.modificarcarpeta(this.carpetaactual, name);   
            Calendar calendario = Calendar.getInstance();
            int hora =calendario.get(Calendar.HOUR_OF_DAY);
            int minutos = calendario.get(Calendar.MINUTE);
            int segundos = calendario.get(Calendar.SECOND);
            int a√±o=calendario.get(Calendar.YEAR);
            int mes=calendario.get(Calendar.MONTH)+1;
            int dia=calendario.get(Calendar.DATE);
            String fecha=dia+"/"+mes+"/"+a√±o;
            String tiempo=hora + ":" + minutos + ":" + segundos;
            EDD_Drive.bitacora.insertar(fecha, tiempo, "Modificacion de "+this.carpetaactual+" a "+name ,EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].usuario);
            this.direccion=this.direccion.replace(this.carpetaactual, name);
            this.carpetaactual=name;
            System.out.println("Esta es la direccion despues de modificar"+this.direccion);
            crearbotones(this.carpetaactual,this.direccion);
        }else if(this.carpetaactual.equals("/")){
            JOptionPane.showConfirmDialog(null, "No se puede modificar nombre de la carpeta raiz");
        }else{
            JOptionPane.showConfirmDialog(null, "Error");
        }
    }//GEN-LAST:event_btnmodcarActionPerformed

    private void btnelicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnelicarActionPerformed
        boolean decision=JOptionPane.showConfirmDialog(null, "Desea Eliminar")==JOptionPane.OK_OPTION;
        if (decision && !this.carpetaactual.equals("/")) {
            EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].carpetas.eliminar(this.carpetaactual);   
            Calendar calendario = Calendar.getInstance();
            int hora =calendario.get(Calendar.HOUR_OF_DAY);
            int minutos = calendario.get(Calendar.MINUTE);
            int segundos = calendario.get(Calendar.SECOND);
            int a√±o=calendario.get(Calendar.YEAR);
            int mes=calendario.get(Calendar.MONTH)+1;
            int dia=calendario.get(Calendar.DATE);
            String fecha=dia+"/"+mes+"/"+a√±o;
            String tiempo=hora + ":" + minutos + ":" + segundos;
            EDD_Drive.bitacora.insertar(fecha, tiempo, "Eliminacion de "+this.carpetaactual,EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].usuario);
            this.direccion=this.direccion.replace("/"+this.carpetaactual, "");
            if(this.direccion.equals("")){
                this.direccion="/";
                this.carpetaactual="/";
            }else{
                String paracarpetactual[]=this.direccion.split("/");
                this.carpetaactual=paracarpetactual[paracarpetactual.length-1];
            }
            crearbotones(this.carpetaactual,this.direccion);
        }else if(this.carpetaactual.equals("/")){
            JOptionPane.showMessageDialog(null, "No se puede eliminar la carpeta raiz");
        }else{
            JOptionPane.showConfirmDialog(null, "Error");
        } 
    }//GEN-LAST:event_btnelicarActionPerformed

    private void btnsalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsalirActionPerformed
        EDD_Drive.usuarioactual=-1;
        Ventana inicio=new Ventana();
        inicio.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnsalirActionPerformed

    private void btnbitacoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbitacoraActionPerformed
        try {
            EDD_Drive.bitacora.GraficarBitacora();
        } catch (IOException ex) {
            Logger.getLogger(Drive.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnbitacoraActionPerformed

    private void btnreportecarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnreportecarActionPerformed
        try {
            EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].carpetas.GraficarMatriz();
            EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].carpetas.GraficarGrafo();
        } catch (IOException ex) {
            Logger.getLogger(Drive.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnreportecarActionPerformed

    private void btnreportarchivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnreportarchivosActionPerformed
        try {
            File imgArch=EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].carpetas.GraficarArchivos(this.carpetaactual);
        } catch (IOException ex) {
            Logger.getLogger(Drive.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnreportarchivosActionPerformed

    private void btnuparcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnuparcActionPerformed
        String insertados="";
        JFileChooser selectorArchivos = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos CSV", "csv");
        selectorArchivos.setFileSelectionMode(JFileChooser.FILES_ONLY);
        selectorArchivos.setFileFilter(filtro);
        selectorArchivos.showOpenDialog(this);
        File archivo = selectorArchivos.getSelectedFile();
        if ((archivo == null) || (archivo.getName().equals(""))) {
            return;
        }
        try {
            BufferedReader br = new BufferedReader(new FileReader(archivo));
            String linea;
            boolean primero=true;
            int arch=0;
            int cont=0;
            while((linea=br.readLine())!=null){
                String[] texto=linea.split(",");
                if (primero) {
                    for (int i = 0; i < texto.length; i++) {
                        if (texto[i].toLowerCase().equals("archivo")) {
                           arch=i; 
                            System.out.println("Archivos "+arch);
                        }else if(texto[i].toLowerCase().equals("contenido")){
                            cont=i;
                            System.out.println("Contenidos "+ cont);
                        }else{
                            JOptionPane.showMessageDialog(null, "No posee las columnas necesarias");
                        }
                    }
                    primero=false;
                }else{
                    String[] nomext=texto[arch].split("\\.");
                    String nombre=nomext[0];
                    for (int i = 1; i < nomext.length-1; i++) {
                        nombre+=nomext[i];
                    }
                    System.out.println("Nombre: "+nombre+" Extension: "+nomext[nomext.length-1]+" Contenido: "+texto[cont]);
                    EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].carpetas.InsertarArchivo(this.carpetaactual, nombre, nomext[nomext.length-1],texto[cont]);
                    insertados+=nombre+"."+ nomext[nomext.length-1]+", ";
                }
            }     
            Calendar calendario = Calendar.getInstance();
                int hora =calendario.get(Calendar.HOUR_OF_DAY);
                int minutos = calendario.get(Calendar.MINUTE);
                int segundos = calendario.get(Calendar.SECOND);
                int a√±o=calendario.get(Calendar.YEAR);
                int mes=calendario.get(Calendar.MONTH)+1;
                int dia=calendario.get(Calendar.DATE);
                String fecha=dia+"/"+mes+"/"+a√±o;
                String tiempo=hora + ":" + minutos + ":" + segundos;
            if (!insertados.equals("")) {
                EDD_Drive.bitacora.insertar(fecha, tiempo, "Insercion de archivos: "+insertados,EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].usuario);
            }
            crearbotones(this.carpetaactual,this.direccion);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Drive.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Drive.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnuparcActionPerformed

    private void btnupuserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnupuserActionPerformed
        String errores="";
        String usuarios="";
        JFileChooser selectorArchivos = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos CSV", "csv");
        selectorArchivos.setFileSelectionMode(JFileChooser.FILES_ONLY);
        selectorArchivos.setFileFilter(filtro);
        selectorArchivos.showOpenDialog(this);
        File archivo = selectorArchivos.getSelectedFile();
        if ((archivo == null) || (archivo.getName().equals(""))) {
            return;
        }
        try {
            BufferedReader br = new BufferedReader(new FileReader(archivo));
            String linea;
            boolean primero=true;
            int user=0;
            int pass=0;
            while((linea=br.readLine())!=null){
                String[] texto=linea.split(",");
                if (primero) {
                    for (int i = 0; i < texto.length; i++) {
                        if (texto[i].toLowerCase().equals("usuario")) {
                           user=i; 
                            System.out.println("Archivos "+user);
                        }
                        if(texto[i].toLowerCase().equals("password")){
                            pass=i;
                            System.out.println("Contenidos "+ pass);
                        }
                    }
                    primero=false;
                }else{
                    if (texto[pass].length()<8) {
                        errores+="Usuario: "+texto[user]+" no cumple con la contrase√±a \n";
                    }else{
                        if(EDD_Drive.user.Insertar(texto[user], texto[pass])){
                            usuarios+=texto[user]+", ";
                        }else{
                            errores+="Usuario"+texto[user]+" usuario ya existe \n";
                        }
                    }
                }
            }  
            Calendar calendario = Calendar.getInstance();
                int hora =calendario.get(Calendar.HOUR_OF_DAY);
                int minutos = calendario.get(Calendar.MINUTE);
                int segundos = calendario.get(Calendar.SECOND);
                int a√±o=calendario.get(Calendar.YEAR);
                int mes=calendario.get(Calendar.MONTH)+1;
                int dia=calendario.get(Calendar.DATE);
                String fecha=dia+"/"+mes+"/"+a√±o;
                String tiempo=hora + ":" + minutos + ":" + segundos;
            if (!usuarios.equals("")) {
                EDD_Drive.bitacora.insertar(fecha, tiempo, "Insercion de usuarios: "+usuarios,EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].usuario);
            }
            if (!errores.equals("")) {
                JOptionPane.showMessageDialog(null, errores);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Drive.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Drive.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Drive.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnupuserActionPerformed

    private void brnreportuserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brnreportuserActionPerformed
        try {
            EDD_Drive.user.Graficar();
        } catch (IOException ex) {
            Logger.getLogger(Drive.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_brnreportuserActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Drive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Drive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Drive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Drive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Drive().setVisible(true);
            }
        });
    }
    
    private void crearbotones(String carpeta,String direccion){
        jPcontenido.removeAll();
        String direccion2=direccion.replaceAll("-[0-9]+", "");
        jPcontenido.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), direccion2, javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12)));
        javax.swing.JButton btnregresar=new javax.swing.JButton("\n...");
        btnregresar.setIcon(defaultIcon);
        btnregresar.setHorizontalTextPosition( SwingConstants.CENTER );
        btnregresar.setVerticalTextPosition( SwingConstants.BOTTOM );
        btnregresar.addActionListener((ActionEvent e) -> 
                {
                    String[] carpet=Arrays.asList(this.direccion.split("/")).stream().filter(str -> !str.isEmpty()).collect(Collectors.toList()).toArray(new String[0]);
                    String direccionnueva="";
                    for (int i = 0; i < (carpet.length-1); i++) {
                            direccionnueva+="/";
                            direccionnueva+=carpet[i];        
                    }
                    if(direccionnueva.equals("")){
                        this.direccion="/";
                        this.carpetaactual="/";
                    }else{
                        this.direccion=direccionnueva;
                        System.out.println("carpeta nueva: "+carpet[carpet.length-2]);
                        this.carpetaactual=carpet[carpet.length-2];
                    }
                    crearbotones(carpetaactual,this.direccion);
                });
        jPcontenido.add(btnregresar);
        btnregresar.repaint();
        String carp=EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].carpetas.ListarCarpetas(carpeta);
        String arch=EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].carpetas.ListarArchivos(carpeta);
        System.out.println("esta es la lista de archivos: "+arch);
        String arraycarpetas[]=carp.split(",");
        String arrayarchivos[]=arch.split(",");
        this.carpetas=new javax.swing.JButton[arraycarpetas.length];
        this.archivos=new javax.swing.JButton[arrayarchivos.length];
        for (int i=0;i<arraycarpetas.length;i++) {
            if (!arraycarpetas[i].equals("")) {
                int index=arraycarpetas[i].indexOf("#");
                int index2=arraycarpetas[i].indexOf("#", index+1);
                String subcadena=arraycarpetas[i].substring(index, index2+1);
                int entero=Integer.parseInt(subcadena.replace("#", ""));
                System.out.println("entero "+entero);
                arraycarpetas[i]=arraycarpetas[i].replace(subcadena, "");
                String carpetas2[]=arraycarpetas[i].split("/");
                this.carpetas[i]=new javax.swing.JButton(carpetas2[carpetas2.length-1]);
                this.carpetas[i].setIcon(defaultIcon);
                this.carpetas[i].setHorizontalTextPosition( SwingConstants.CENTER );
                this.carpetas[i].setVerticalTextPosition( SwingConstants.BOTTOM );
                if (entero==0) {
                    this.carpetas[i].setActionCommand(this.carpetas[i].getText());
                }else{
                    this.carpetas[i].setActionCommand(this.carpetas[i].getText()+"-"+entero);
                }
                this.carpetas[i].addActionListener((ActionEvent e) -> 
                {
                    if (this.carpetaactual.equals("/")) {
                        this.direccion+=e.getActionCommand();
                    }else{
                        this.direccion=this.direccion+"/"+e.getActionCommand();
                    }
                    this.carpetaactual=e.getActionCommand();   
                    crearbotones(carpetaactual,this.direccion);
                });
                jPcontenido.add(this.carpetas[i]);
            }  
        }
        for (int i=0;i<arrayarchivos.length;i++) {
            if (!arrayarchivos[i].equals("")) {
                this.archivos[i]=new javax.swing.JButton(arrayarchivos[i]);
                this.archivos[i].setIcon(this.defaultIconarchivo);
                this.archivos[i].setHorizontalTextPosition( SwingConstants.CENTER );
                this.archivos[i].setVerticalTextPosition( SwingConstants.BOTTOM );
                this.archivos[i].addActionListener((ActionEvent e) -> {
                    Object[] options1 = { "Aceptar", "Modificar","Eliminar","Compartir","Descargar"};
                    javax.swing.JTextField nombre=new javax.swing.JTextField(10);
                    javax.swing.JTextArea contenido=new javax.swing.JTextArea(10, 10);
                    JScrollPane scroll = new JScrollPane(contenido);
                    contenido.setLineWrap(true);
                    contenido.setWrapStyleWord(true);
                    nombre.setText(e.getActionCommand());
                    String[] arraycontenido = EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].carpetas.contenidoarchivo(Drive.this.carpetaactual, e.getActionCommand());
                    System.out.println("Este es el contenido: "+arraycontenido[2]);
                    contenido.setText(arraycontenido[2]);
                    JPanel mypanel=new JPanel();
                    mypanel.setLayout(new GridLayout(0,2));
                    mypanel.add(new JLabel("nombre:"));
                    mypanel.add(nombre);
                    mypanel.add(new JLabel("contenido:"));
                    mypanel.add(scroll);
                    int result = JOptionPane.showOptionDialog(null, mypanel, e.getActionCommand(),
                            JOptionPane.OK_OPTION, JOptionPane.PLAIN_MESSAGE,
                            null, options1, null);
                    switch (result) {
                        case 1:
                            try {
                                EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].carpetas.modArchivo(Drive.this.carpetaactual, e.getActionCommand(), nombre.getText(), contenido.getText());
                                Calendar calendario = Calendar.getInstance();
                                int hora =calendario.get(Calendar.HOUR_OF_DAY);
                                int minutos = calendario.get(Calendar.MINUTE);
                                int segundos = calendario.get(Calendar.SECOND);
                                int a√±o=calendario.get(Calendar.YEAR);
                                int mes=calendario.get(Calendar.MONTH)+1;
                                int dia=calendario.get(Calendar.DATE);
                                String fecha=dia+"/"+mes+"/"+a√±o;
                                String tiempo=hora + ":" + minutos + ":" + segundos;
                                EDD_Drive.bitacora.insertar(fecha, tiempo, "Modificacion archivo: "+e.getActionCommand(),EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].usuario);
                            }catch (IOException ex) {
                                try {
                                    EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].carpetas.InsertarArchivo(arraycontenido[0], arraycontenido[1], arraycontenido[2], arraycontenido[3]);
                                } catch (IOException ex1) {
                                    Logger.getLogger(Drive.class.getName()).log(Level.SEVERE, null, ex1);
                                }
                                JOptionPane.showMessageDialog(null, "Modificacion no posible");
                                Logger.getLogger(Drive.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            crearbotones(Drive.this.carpetaactual, Drive.this.direccion);
                            break;
                        case 2:
                            EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].carpetas.eliminararchivo(Drive.this.carpetaactual, e.getActionCommand());
                            Calendar calendario = Calendar.getInstance();
                            int hora =calendario.get(Calendar.HOUR_OF_DAY);
                            int minutos = calendario.get(Calendar.MINUTE);
                            int segundos = calendario.get(Calendar.SECOND);
                            int a√±o=calendario.get(Calendar.YEAR);
                            int mes=calendario.get(Calendar.MONTH)+1;
                            int dia=calendario.get(Calendar.DATE);
                            String fecha=dia+"/"+mes+"/"+a√±o;
                            String tiempo=hora + ":" + minutos + ":" + segundos;
                            EDD_Drive.bitacora.insertar(fecha, tiempo, "Eliminacion archivo: "+e.getActionCommand(),EDD_Drive.user.usuarios[EDD_Drive.usuarioactual].usuario);
                            crearbotones(Drive.this.carpetaactual, Drive.this.direccion);
                            break;
                        case 3:
                            JPanel JPcompartir=new JPanel(new GridLayout(0,1));
                            JComboBox jcbusers =new JComboBox();
                            String[] usuarios=EDD_Drive.user.Listasusuarios();
                            for (String usuario : usuarios) {
                                if (usuario!=null || !"".equals(usuario)) {
                                    jcbusers.addItem(usuario);
                                }
                            }
                            JPcompartir.add(new JLabel("Elija usuario"));
                            JPcompartir.add(jcbusers);
                            int reply = JOptionPane.showConfirmDialog(null, JPcompartir, "Compartir", JOptionPane.YES_NO_OPTION);
                            if (reply == JOptionPane.YES_OPTION) {
                                int no=EDD_Drive.user.BuscarUsuario(jcbusers.getSelectedItem().toString());
                                String[] nomext=e.getActionCommand().split("\\.");
                                String nombrearchivo=nomext[0];
                                for (int i1 = 1; i1 < nomext.length-1; i1++) {
                                    nombrearchivo += "." + nomext[i1];
                                }
                                try {
                                    EDD_Drive.user.usuarios[no].carpetas.InsertarArchivo("/",nombrearchivo,nomext[nomext.length-1],arraycontenido[2]);
                                } catch (IOException ex) {
                                    Logger.getLogger(Drive.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                            break;
                        case 4:
                            File descargar=new File(e.getActionCommand());
                            BufferedWriter bw;
                            {
                                try {
                                    bw=new BufferedWriter(new FileWriter(descargar));
                                    bw.write(arraycontenido[2]);
                                    bw.close();
                                    Desktop.getDesktop().open(descargar);
                                } catch (IOException ex) {
                                    Logger.getLogger(Drive.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(null, "Error al abrir el archivo");
                                }
                            }
                            break;
                        default:
                            break;
                    }
                });
                jPcontenido.add(this.archivos[i]);
            }  
        }
        jPcontenido.revalidate();
        jPcontenido.repaint(); 
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton brnreportuser;
    private javax.swing.JButton btnbitacora;
    private javax.swing.JButton btncreararc;
    private javax.swing.JButton btncrearcar;
    private javax.swing.JButton btnelicar;
    private javax.swing.JButton btnmodcar;
    private javax.swing.JButton btnreportarchivos;
    private javax.swing.JButton btnreportecar;
    private javax.swing.JButton btnsalir;
    private javax.swing.JButton btnuparc;
    private javax.swing.JButton btnupuser;
    private javax.swing.JPanel jParc;
    private javax.swing.JPanel jPcar;
    private javax.swing.JPanel jPcontenido;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
